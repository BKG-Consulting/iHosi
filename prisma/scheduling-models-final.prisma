// Enhanced Scheduling Models for Doctor Calendar Integration

model DoctorSchedule {
  id                String   @id @default(cuid())
  doctor_id         String
  name              String   // e.g., "Regular Schedule", "Emergency Coverage"
  description       String?
  is_active         Boolean  @default(true)
  is_default        Boolean  @default(false)
  timezone          String   @default("UTC")
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  doctor            Doctor   @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  schedule_templates ScheduleTemplate[]
  schedule_blocks   ScheduleBlock[]
  calendar_integrations CalendarIntegration[]

  @@map("doctor_schedules")
}

model ScheduleTemplate {
  id                String   @id @default(cuid())
  schedule_id       String
  name              String   // e.g., "Monday Morning", "Weekend Emergency"
  day_of_week       Int      // 0 = Sunday, 1 = Monday, etc.
  start_time        String   // "09:00"
  end_time          String   // "17:00"
  is_working        Boolean  @default(true)
  break_start       String?  // "12:00"
  break_end         String?  // "13:00"
  max_appointments  Int?     // Maximum appointments per day
  appointment_duration Int   @default(30) // Minutes per appointment
  buffer_time       Int      @default(15) // Buffer between appointments
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  schedule          DoctorSchedule @relation(fields: [schedule_id], references: [id], onDelete: Cascade)
  schedule_blocks   ScheduleBlock[]

  @@map("schedule_templates")
}

model ScheduleBlock {
  id                String   @id @default(cuid())
  schedule_id       String
  template_id       String?
  date              DateTime // Specific date for this block
  start_time        String   // "09:00"
  end_time          String   // "17:00"
  is_working        Boolean  @default(true)
  break_start       String?  // "12:00"
  break_end         String?  // "13:00"
  max_appointments  Int?
  appointment_duration Int   @default(30)
  buffer_time       Int      @default(15)
  notes             String?
  is_recurring      Boolean  @default(false)
  recurring_pattern String?  // "WEEKLY", "MONTHLY", etc.
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  schedule          DoctorSchedule @relation(fields: [schedule_id], references: [id], onDelete: Cascade)
  template          ScheduleTemplate? @relation(fields: [template_id], references: [id], onDelete: SetNull)
  time_slots        TimeSlot[]
  appointments      Appointment[]

  @@map("schedule_blocks")
}

model TimeSlot {
  id                String   @id @default(cuid())
  block_id          String
  start_time        String   // "09:00"
  end_time          String   // "09:30"
  is_available      Boolean  @default(true)
  is_booked         Boolean  @default(false)
  appointment_id    String?
  notes             String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  block             ScheduleBlock @relation(fields: [block_id], references: [id], onDelete: Cascade)
  appointment       Appointment? @relation(fields: [appointment_id], references: [id], onDelete: SetNull)

  @@map("time_slots")
}

model CalendarIntegration {
  id                String   @id @default(cuid())
  doctor_id         String
  schedule_id       String?
  provider          String   // "GOOGLE", "OUTLOOK", "APPLE"
  provider_calendar_id String
  calendar_name     String
  access_token      String   // Encrypted
  refresh_token     String?  // Encrypted
  expires_at        DateTime?
  is_active         Boolean  @default(true)
  sync_enabled      Boolean  @default(true)
  last_sync_at      DateTime?
  sync_direction    String   @default("BIDIRECTIONAL") // "INBOUND", "OUTBOUND", "BIDIRECTIONAL"
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  doctor            Doctor @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  schedule          DoctorSchedule? @relation(fields: [schedule_id], references: [id], onDelete: SetNull)
  calendar_events   CalendarEvent[]

  @@map("calendar_integrations")
}

model CalendarEvent {
  id                String   @id @default(cuid())
  integration_id    String
  provider_event_id String   // External calendar event ID
  appointment_id    String?  // Link to our appointment if exists
  title             String
  description       String?
  start_time        DateTime
  end_time          DateTime
  is_all_day        Boolean  @default(false)
  location          String?
  attendees         Json?    // Array of attendee emails
  status            String   @default("CONFIRMED") // "CONFIRMED", "TENTATIVE", "CANCELLED"
  event_type        String   @default("APPOINTMENT") // "APPOINTMENT", "BREAK", "BLOCKED", "PERSONAL"
  last_synced_at    DateTime @default(now())
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  integration       CalendarIntegration @relation(fields: [integration_id], references: [id], onDelete: Cascade)
  appointment       Appointment? @relation(fields: [appointment_id], references: [id], onDelete: SetNull)

  @@map("calendar_events")
}

model ScheduleNotification {
  id                String   @id @default(cuid())
  doctor_id         String
  appointment_id    String?
  type              String   // "REMINDER", "CANCELLATION", "RESCHEDULE", "NEW_APPOINTMENT"
  recipient_type    String   @default("PATIENT") // "PATIENT", "DOCTOR", "BOTH"
  send_time         DateTime // When to send the notification
  is_sent           Boolean  @default(false)
  sent_at           DateTime?
  delivery_status   String?  // "SENT", "DELIVERED", "FAILED", "BOUNCED"
  template_id       String?  // Reference to notification template
  custom_message    String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  doctor            Doctor @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  appointment       Appointment? @relation(fields: [appointment_id], references: [id], onDelete: SetNull)

  @@map("schedule_notifications")
}

