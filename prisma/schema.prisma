

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



enum Role {
  ADMIN
  NURSE
  DOCTOR
  LAB_TECHNICIAN
  PATIENT
  CASHIER
  ADMIN_ASSISTANT
}

enum Status {
  ACTIVE
  INACTIVE
  DORMANT
}

enum JOBTYPE {
  FULL
  PART  
}

enum Gender {
  MALE
  FEMALE
}

enum AppointmentStatus {
  PENDING
  SCHEDULED
  CANCELLED
  COMPLETED
}

enum PaymentMethod {
  CASH
  CARD
}

enum PaymentStatus {
  PAID
  UNPAID
  PART
}

enum ConsentType {
  HIPAA_PRIVACY
  TREATMENT
  PAYMENT
  OPERATIONS
  MARKETING
  RESEARCH
  DIRECTORY_LISTING
  EMERGENCY_CONTACT
  TELEMEDICINE
  DATA_SHARING
}

enum ConsentStatus {
  GRANTED
  DENIED
  REVOKED
  EXPIRED
  PENDING
}

enum AvailabilityStatus {
  AVAILABLE
  UNAVAILABLE
  BUSY
  ON_BREAK
  ON_LEAVE
  EMERGENCY_ONLY
}

enum LeaveType {
  ANNUAL
  SICK
  MATERNITY
  PATERNITY
  UNPAID
  OTHER
  VACATION
  SICK_LEAVE
  PERSONAL
  CONFERENCE
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum AvailabilityUpdateType {
  SCHEDULE_CHANGE
  EMERGENCY_UNAVAILABLE
  TEMPORARY_UNAVAILABLE
  CAPACITY_UPDATE
  BREAK_TIME_UPDATE
}

enum AdmissionType {
  EMERGENCY
  ELECTIVE
  OBSERVATION
  DAY_CARE
  TRANSFER
}

enum AdmissionStatus {
  PENDING
  ADMITTED
  DISCHARGED
  TRANSFERRED
  CANCELLED
}

enum PriorityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}


model Patient {
  id                       String   @id //clerk userId
  first_name               String
  last_name                String
  date_of_birth            DateTime
  gender                   Gender @default(MALE)
  phone                    String
  email                    String   @unique
  marital_status           String
  address                  String
  emergency_contact_name   String
  emergency_contact_number String
  relation                 String
  blood_group              String?
  allergies                String?
  medical_conditions       String?
  medical_history          String?
  insurance_provider       String?
  insurance_number         String?
  privacy_consent          Boolean
  service_consent          Boolean
  medical_consent          Boolean
  img                      String?
  colorCode                String?
  
  // Authentication fields
  password                 String?
  mfa_secret               String?
  mfa_enabled              Boolean @default(false)
  last_login_at            DateTime?
  password_changed_at      DateTime @default(now())

  appointments             Appointment[]
  medical                  MedicalRecords[]
  payments                 Payment[]
  ratings                  Rating[]
  consents                 PatientConsent[]
  beds                     Bed[]  // New: Bed assignments
  admissions               Admission[]  // Patient admissions
  
  // Financial relations
  invoices                 Invoice[]
  payment_plans            PaymentPlan[]
  insurances               PatientInsurance[]
  insurance_claims         InsuranceClaim[]

  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt
}

model Doctor {
  id                    String   @id
  email                 String   @unique
  name                  String
  specialization        String
  license_number        String
  phone                 String
  address               String
  department            String?
  department_id         String?  // New: Reference to Department model
  emergency_contact     String
  emergency_phone       String
  qualifications        String
  experience_years      Int
  languages             String[] // Array of languages
  consultation_fee      Float
  max_patients_per_day  Int
  preferred_appointment_duration Int // in minutes
  appointment_duration  Int @default(30) // Default appointment duration in minutes
  buffer_time           Int @default(5) // Buffer time between appointments in minutes
  img                   String?
  colorCode             String?
  availability_status   AvailabilityStatus @default(AVAILABLE)
  
  // Authentication fields
  password              String?
  mfa_secret            String?
  mfa_enabled           Boolean @default(false)
  last_login_at         DateTime?
  password_changed_at   DateTime @default(now())

  type                  JOBTYPE @default(FULL)
  working_days          WorkingDays[]
  appointments          Appointment[]
  ratings               Rating[]
  diagnosis             Diagnosis[] 
  leave_requests        LeaveRequest[]
  availability_updates  AvailabilityUpdate[]
  admissions            Admission[]
  export_jobs           ExportJob[]
  
  // New: Department relationship
  department_ref        Department? @relation("DepartmentDoctors", fields: [department_id], references: [id])
  
  // Calendar integrations
  calendar_integrations CalendarIntegration[]
  schedule_notifications ScheduleNotification[]

  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
}


model WorkingDays {
  id              Int   @id @default(autoincrement())
  doctor_id       String
  day_of_week     String
  start_time      String
  end_time        String
  is_working      Boolean @default(true)
  break_start_time String?
  break_end_time  String?
  max_appointments Int @default(20)

  doctor          Doctor  @relation(fields: [doctor_id], references: [id], onDelete: Cascade)

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@unique([doctor_id, day_of_week])
  @@index([doctor_id])
}

model LeaveRequest {
  id              String   @id @default(cuid())
  doctor_id       String
  leave_type      LeaveType
  start_date      DateTime
  end_date        DateTime
  reason          String
  status          LeaveStatus @default(PENDING)
  approved_by     String?
  approved_at     DateTime?
  notes           String?

  doctor          Doctor  @relation(fields: [doctor_id], references: [id], onDelete: Cascade)

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model AvailabilityUpdate {
  id              String   @id @default(cuid())
  doctor_id       String
  update_type     AvailabilityUpdateType
  effective_date  DateTime
  end_date        DateTime?
  reason          String?
  is_temporary    Boolean @default(false)

  doctor          Doctor  @relation(fields: [doctor_id], references: [id], onDelete: Cascade)

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}


model Staff {
  id            String   @id
  email         String   @unique
  name          String
  phone         String
  address       String
  department    String?
  department_id String?  // New: Reference to Department model
  img           String?
  license_number String?
  colorCode      String?

  role          Role
  status        Status @default(ACTIVE)
  
  // Authentication fields
  password      String?
  mfa_secret    String?
  mfa_enabled   Boolean @default(false)
  last_login_at DateTime?
  password_changed_at DateTime @default(now())
  
  // New: Department relationship
  department_ref        Department? @relation("DepartmentStaff", fields: [department_id], references: [id])

  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}


model Appointment {
  id                Int   @id @default(autoincrement())
  patient_id        String
  doctor_id         String
  appointment_date  DateTime
  time              String
  status            AppointmentStatus @default(PENDING)
  type              String
  note              String?
  service_id        Int?   // Optional service for the appointment
  patient           Patient  @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  doctor            Doctor   @relation(fields: [doctor_id], references: [id],  onDelete:  Cascade)
  service           Services? @relation(fields: [service_id], references: [id])

  bills             Payment[]
  medical           MedicalRecords[]

  reason            String?
  calendar_event_id String?
  calendar_synced_at DateTime?
  
  // Calendar events relation
  calendar_events   CalendarEvent[]
  schedule_notifications ScheduleNotification[]
  
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
}

model Admission {
  id                    String          @id @default(cuid())
  admission_number      String          @unique
  patient_id            String
  doctor_id             String
  department_id         String
  ward_id               String?
  bed_id                String?
  admission_type        AdmissionType
  admission_status      AdmissionStatus @default(PENDING)
  priority_level        PriorityLevel   @default(MEDIUM)
  admission_date        DateTime
  admission_time        String
  admission_reason      String
  chief_complaint       String
  presenting_symptoms   String?
  medical_history       String?
  allergies             String?
  current_medications   String?
  insurance_verified    Boolean         @default(false)
  insurance_provider    String?
  insurance_number      String?
  estimated_stay_days   Int?
  estimated_cost        Decimal?        @db.Decimal(10, 2)
  initial_vital_signs   String?
  triage_score          Int?
  risk_assessment       String?
  discharge_date        DateTime?
  discharge_time        String?
  discharge_summary     String?
  discharge_instructions String?
  created_by            String
  updated_by            String?
  
  // Relations
  patient               Patient         @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  doctor                Doctor          @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  department            Department      @relation(fields: [department_id], references: [id])
  ward                  Ward?           @relation(fields: [ward_id], references: [id])
  bed                   Bed?            @relation(fields: [bed_id], references: [id])
  
  created_at            DateTime        @default(now())
  updated_at            DateTime        @updatedAt
}

model Payment {
  id              Int   @id @default(autoincrement())
  bill_id         Int?
  patient_id      String
  appointment_id  Int @unique
  bill_date       DateTime
  payment_date    DateTime
  discount        Float
  total_amount    Float
  amount_paid     Float

  payment_method  PaymentMethod @default(CASH)
  status          PaymentStatus @default(UNPAID)
  receipt_number  Int @default(autoincrement())

  // Enhanced payment fields
  transaction_id  String?       @unique
  payment_gateway String?
  processing_fee  Decimal?      @db.Decimal(10, 2)
  refund_amount   Decimal?      @db.Decimal(10, 2)
  refund_date     DateTime?
  payment_notes   String?

  appointment     Appointment @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  patient         Patient  @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  bills           PatientBills[]
  
  // Financial relations
  invoices        Invoice[]
  payment_plans   PaymentPlan[]
  insurance_claims InsuranceClaim[]

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model ExportJob {
  id                    String   @id @default(cuid())
  doctor_id             String
  format                String   // pdf, csv, excel, ical, json
  date_range_start      DateTime
  date_range_end        DateTime
  include_appointments  Boolean  @default(true)
  include_working_hours Boolean  @default(true)
  include_leave_requests Boolean @default(false)
  include_templates     Boolean  @default(false)
  email_delivery        Boolean  @default(false)
  email_address         String?
  status                String   @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  file_path             String?
  error_message         String?
  created_by            String
  processed_at          DateTime?
  expires_at            DateTime?
  
  doctor                Doctor   @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  
  @@index([doctor_id])
  @@index([status])
  @@index([created_at])
}

model PatientBills {
  id              Int   @id @default(autoincrement())
  bill_id         Int
  service_id      Int?
  bundle_id       String? // Optional service bundle
  service_date    DateTime
  quantity        Int
  unit_cost       Float
  total_cost      Float
  service         Services? @relation(fields: [service_id], references: [id])
  bundle          ServiceBundle? @relation(fields: [bundle_id], references: [id])
  payment         Payment @relation(fields: [bill_id], references: [id], onDelete: Cascade)

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model LabTest {
  id            Int   @id @default(autoincrement())
  record_id     Int
  test_date     DateTime
  result        String
  status        String
  notes         String?
  service_id    Int @unique
  services      Services @relation(fields: [service_id], references: [id])

  medical_record MedicalRecords  @relation(fields: [record_id], references: [id], onDelete: Cascade)

  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model MedicalRecords {
  id              Int @id @default(autoincrement())
  patient_id      String
  appointment_id  Int
  doctor_id       String
  treatment_plan  String?
  prescriptions   String?
  lab_request     String?

  appointment     Appointment @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  patient         Patient  @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  lab_test        LabTest[]
  notes           String?
 
  vital_signs     VitalSigns[]
  diagnosis       Diagnosis[]

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model VitalSigns {
  id                Int      @id @default(autoincrement())
  patient_id        String
  medical_id        Int  
  medical           MedicalRecords @relation(fields: [medical_id], references: [id], onDelete: Cascade)
  body_temperature   Float    
  systolic          Int       
  diastolic         Int     
  heartRate         String      
  respiratory_rate   Int?       
  oxygen_saturation  Int?     
  weight            Float     
  height            Float     

  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
}

model Diagnosis {
  id              Int      @id @default(autoincrement())
  patient_id      String
  medical_id      Int
  doctor_id       String
  doctor          Doctor    @relation(fields: [doctor_id], references: [id])
  symptoms        String    
  diagnosis       String    
  notes           String?   
  prescribed_medications String?   
  follow_up_plan   String?

  medical          MedicalRecords @relation(fields: [medical_id ], references: [id], onDelete: Cascade)

  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
}

model AuditLog {
  id          Int   @id @default(autoincrement())
  user_id     String
  record_id   String
  action      String
  details     String?
  model       String

  // Remove problematic foreign key constraints
  // Audit logs should be independent and not enforce strict relationships

  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Rating {
  id         Int      @id @default(autoincrement())
  staff_id   String
  patient_id String
  rating     Int      
  comment    String?  

  doctor     Doctor   @relation(fields: [staff_id], references: [id], onDelete: Cascade)
  patient    Patient  @relation(fields: [patient_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Services {
  id             Int    @id @default(autoincrement())
  service_name    String
  description     String
  price           Float
  category        String? // e.g., "Cardiology", "Neurology", "General"
  department_id   String? // Reference to Department
  is_active       Boolean @default(true)
  duration_minutes Int?   // Estimated duration in minutes
  requirements    String? // Special requirements or prerequisites
  labtest         LabTest?
  bills           PatientBills[]
  appointments    Appointment[] // Services can be linked to appointments
  
  // Department relationship
  department      Department? @relation(fields: [department_id], references: [id])
  
  // Service bundle relationships
  bundle_items    ServiceBundleItem[]
  
  // Service template relationships
  template_items  ServiceTemplateItem[]
  
  // Financial relationships
  invoice_line_items InvoiceLineItem[]
  
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

// Service Bundles/Packages
model ServiceBundle {
  id              String @id @default(cuid())
  name            String
  description     String?
  total_price     Float
  discount_percent Float? // Optional discount percentage
  is_active       Boolean @default(true)
  bundle_items    ServiceBundleItem[]
  bills           PatientBills[] // Bundles can be billed
  
  // Financial relationships
  invoice_line_items InvoiceLineItem[]
  
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

// Individual items within a service bundle
model ServiceBundleItem {
  id              String @id @default(cuid())
  bundle_id       String
  service_id      Int
  quantity        Int @default(1)
  is_required     Boolean @default(true) // Whether this service is mandatory in the bundle
  
  bundle          ServiceBundle @relation(fields: [bundle_id], references: [id], onDelete: Cascade)
  service         Services @relation(fields: [service_id], references: [id])
  
  created_at      DateTime @default(now())
  
  @@unique([bundle_id, service_id])
}

// Service Templates for common procedures
model ServiceTemplate {
  id              String @id @default(cuid())
  name            String
  description     String?
  category        String // e.g., "Emergency", "Routine", "Specialized"
  department_id   String? // Optional department-specific template
  is_active       Boolean @default(true)
  template_items  ServiceTemplateItem[]
  
  // Department relationship
  department      Department? @relation(fields: [department_id], references: [id])
  
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  created_by      String? // User ID who created the template
}

// Individual services within a template
model ServiceTemplateItem {
  id              String @id @default(cuid())
  template_id     String
  service_id      Int
  quantity        Int @default(1)
  is_required     Boolean @default(true)
  order_index     Int @default(0) // Order of services in the template
  
  template        ServiceTemplate @relation(fields: [template_id], references: [id], onDelete: Cascade)
  service         Services @relation(fields: [service_id], references: [id])
  
  created_at      DateTime @default(now())
  
  @@unique([template_id, service_id])
}

model PatientConsent {
  id                Int           @id @default(autoincrement())
  patient_id        String
  consent_type      ConsentType
  status            ConsentStatus
  consent_text      String
  version           String
  granted_at        DateTime?
  revoked_at        DateTime?
  expires_at        DateTime?
  granted_by        String
  ip_address        String
  user_agent        String
  digital_signature String?
  witness_id        String?
  legal_basis       String
  purpose_of_use    String        @default("[]")
  data_categories   String        @default("[]")
  restrictions      String        @default("[]")
  metadata          String        @default("{}")

  patient           Patient       @relation(fields: [patient_id], references: [id], onDelete: Cascade)

  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt

  @@index([patient_id])
  @@index([consent_type])
  @@index([status])
  @@index([expires_at])
}

model UserSession {
  id             Int      @id @default(autoincrement())
  user_id        String
  session_token  String   @unique
  ip_address     String
  user_agent     String
  created_at     DateTime @default(now())
  last_activity  DateTime @default(now())
  expires_at     DateTime
  is_active      Boolean  @default(true)
  logout_reason  String?

  @@index([user_id])
  @@index([last_activity])
}

model LoginAttempt {
  id             Int      @id @default(autoincrement())
  email          String?
  user_id        String?
  ip_address     String
  user_agent     String
  success        Boolean
  failure_reason String?
  attempted_at   DateTime @default(now())

  @@index([email])
  @@index([ip_address])
  @@index([attempted_at])
}

model UserLockout {
  id              Int      @id @default(autoincrement())
  user_id         String?
  email           String?
  ip_address      String
  locked_at       DateTime @default(now())
  unlock_at       DateTime
  reason          String
  failed_attempts Int      @default(0)

  @@index([user_id])
  @@index([email])
  @@index([ip_address])
  @@index([unlock_at])
}

// New models for enterprise HIMS
model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique // Department code like "CARD", "NEURO"
  description String?
  location    String?  // Building, floor, wing
  contact_number String?
  email       String?
  head_doctor_id String? // Department head
  status      DepartmentStatus @default(ACTIVE)
  capacity    Int      @default(100) // Maximum capacity
  current_load Int     @default(0)   // Current patient load
  
  // Relations
  doctors    Doctor[] @relation("DepartmentDoctors")
  staff      Staff[]  @relation("DepartmentStaff")
  wards      Ward[]
  equipment  Equipment[]
  services   Services[] // Department-specific services
  service_templates ServiceTemplate[] // Department-specific service templates
  admissions Admission[] // Department admissions
  
  // Metadata
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String?  // User ID who created
  updated_by String?  // User ID who last updated
  
  @@map("departments")
}

enum DepartmentStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  CLOSED
}

model Ward {
  id          String   @id @default(cuid())
  name        String   // Ward name like "ICU", "General Ward A"
  department_id String
  floor       Int?
  wing        String?
  capacity    Int      @default(20)
  current_occupancy Int @default(0)
  ward_type   WardType
  status      WardStatus @default(ACTIVE)
  
  // Relations
  department Department @relation(fields: [department_id], references: [id], onDelete: Cascade)
  beds       Bed[]
  equipment  Equipment[]
  admissions Admission[] // Ward admissions
  
  // Metadata
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  @@map("wards")
}

enum WardType {
  INTENSIVE_CARE
  GENERAL
  EMERGENCY
  OPERATING_ROOM
  RECOVERY
  PEDIATRIC
  MATERNITY
  PSYCHIATRIC
  ISOLATION
  STEP_DOWN
}

enum WardStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  QUARANTINE
  CLOSED
}

model Bed {
  id          String   @id @default(cuid())
  bed_number  String   // Bed identifier like "A1", "B3"
  ward_id     String
  bed_type    BedType
  status      BedStatus @default(AVAILABLE)
  current_patient_id String?
  last_cleaned DateTime?
  infection_status InfectionStatus @default(CLEAN)
  
  // Relations
  ward        Ward     @relation(fields: [ward_id], references: [id], onDelete: Cascade)
  patient     Patient? @relation(fields: [current_patient_id], references: [id])
  admissions  Admission[] // Bed admissions
  
  // Metadata
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  @@map("beds")
}

enum BedType {
  STANDARD
  ICU
  ISOLATION
  BARIATRIC
  PEDIATRIC
  MATERNITY
}

enum BedStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  CLEANING
  RESERVED
  OUT_OF_SERVICE
}

enum InfectionStatus {
  CLEAN
  CONTAMINATED
  ISOLATION_REQUIRED
  UNDER_CLEANING
}

model Equipment {
  id              String   @id @default(cuid())
  name            String
  model           String?
  serial_number   String   @unique
  department_id   String?
  ward_id         String?
  equipment_type  EquipmentType
  status          EquipmentStatus @default(OPERATIONAL)
  manufacturer    String?
  purchase_date   DateTime?
  warranty_expiry DateTime?
  last_maintenance DateTime?
  next_maintenance DateTime?
  maintenance_cycle Int? // Days between maintenance
  
  // Relations
  department      Department? @relation(fields: [department_id], references: [id])
  ward            Ward?       @relation(fields: [ward_id], references: [id])
  
  // Metadata
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  
  @@map("equipment")
}

enum EquipmentType {
  DIAGNOSTIC
  MONITORING
  SURGICAL
  IMAGING
  LABORATORY
  THERAPEUTIC
  SUPPORT
  TRANSPORT
}

enum EquipmentStatus {
  OPERATIONAL
  MAINTENANCE
  OUT_OF_SERVICE
  RETIRED
  QUARANTINED
}

// Financial Management Enums
enum BillStatus {
  DRAFT
  PENDING
  SENT
  PAID
  PARTIAL
  OVERDUE
  CANCELLED
  REFUNDED
}

enum InvoiceStatus {
  DRAFT
  SENT
  VIEWED
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentPlanStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  OVERDUE
  SUSPENDED
}

enum InsuranceStatus {
  ACTIVE
  INACTIVE
  PENDING_VERIFICATION
  EXPIRED
  SUSPENDED
}

enum ClaimStatus {
  DRAFT
  SUBMITTED
  PROCESSING
  APPROVED
  DENIED
  PAID
  APPEALED
}

// Financial Management Models
model Invoice {
  id              String @id @default(cuid())
  invoice_number  String @unique
  patient_id      String
  bill_id         Int?
  total_amount    Decimal @db.Decimal(10, 2)
  tax_amount      Decimal @db.Decimal(10, 2)
  discount_amount Decimal @db.Decimal(10, 2)
  net_amount      Decimal @db.Decimal(10, 2)
  status          InvoiceStatus @default(DRAFT)
  due_date        DateTime
  sent_date       DateTime?
  paid_date       DateTime?
  notes           String?
  
  // Relations
  patient         Patient @relation(fields: [patient_id], references: [id])
  bill            Payment? @relation(fields: [bill_id], references: [id])
  line_items      InvoiceLineItem[]
  
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model InvoiceLineItem {
  id              String @id @default(cuid())
  invoice_id      String
  service_id      Int?
  bundle_id       String?
  description     String
  quantity        Int @default(1)
  unit_price      Decimal @db.Decimal(10, 2)
  total_price     Decimal @db.Decimal(10, 2)
  
  // Relations
  invoice         Invoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  service         Services? @relation(fields: [service_id], references: [id])
  bundle          ServiceBundle? @relation(fields: [bundle_id], references: [id])
  
  created_at      DateTime @default(now())
}

model PaymentPlan {
  id              String @id @default(cuid())
  patient_id      String
  bill_id         Int
  total_amount    Decimal @db.Decimal(10, 2)
  down_payment    Decimal @db.Decimal(10, 2)
  monthly_amount  Decimal @db.Decimal(10, 2)
  installments    Int
  start_date      DateTime
  end_date        DateTime
  status          PaymentPlanStatus @default(ACTIVE)
  notes           String?
  
  // Relations
  patient         Patient @relation(fields: [patient_id], references: [id])
  bill            Payment @relation(fields: [bill_id], references: [id])
  payments        PaymentPlanPayment[]
  
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model PaymentPlanPayment {
  id              String @id @default(cuid())
  payment_plan_id String
  installment_number Int
  due_date        DateTime
  amount          Decimal @db.Decimal(10, 2)
  paid_date       DateTime?
  amount_paid     Decimal? @db.Decimal(10, 2)
  status          PaymentStatus @default(UNPAID)
  payment_method  PaymentMethod?
  transaction_id  String?
  notes           String?
  
  // Relations
  payment_plan    PaymentPlan @relation(fields: [payment_plan_id], references: [id], onDelete: Cascade)
  
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model InsuranceProvider {
  id              String @id @default(cuid())
  name            String
  code            String @unique
  contact_person  String?
  phone           String?
  email           String?
  address         String?
  website         String?
  is_active       Boolean @default(true)
  
  // Relations
  patient_insurances PatientInsurance[]
  claims           InsuranceClaim[]
  
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model PatientInsurance {
  id              String @id @default(cuid())
  patient_id      String
  provider_id     String
  policy_number   String
  group_number    String?
  effective_date  DateTime
  expiry_date     DateTime
  status          InsuranceStatus @default(ACTIVE)
  copay_amount    Decimal? @db.Decimal(10, 2)
  deductible      Decimal? @db.Decimal(10, 2)
  coverage_percentage Decimal? @db.Decimal(5, 2)
  notes           String?
  
  // Relations
  patient         Patient @relation(fields: [patient_id], references: [id])
  provider        InsuranceProvider @relation(fields: [provider_id], references: [id])
  claims          InsuranceClaim[]
  
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

// Email Verification System
model EmailVerification {
  id              String   @id @default(cuid())
  email           String
  token           String   @unique
  type            VerificationType
  expires_at      DateTime
  verified        Boolean  @default(false)
  verified_at     DateTime?
  attempts        Int      @default(0)
  max_attempts    Int      @default(3)
  ip_address      String?
  user_agent      String?
  
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  
  @@index([email, type])
  @@index([token])
  @@index([expires_at])
}

enum VerificationType {
  REGISTRATION
  PASSWORD_RESET
  EMAIL_CHANGE
  MFA_SETUP
}

model InsuranceClaim {
  id              String @id @default(cuid())
  patient_id      String
  insurance_id    String
  provider_id     String
  bill_id         Int
  claim_number    String @unique
  service_date    DateTime
  amount_billed   Decimal @db.Decimal(10, 2)
  amount_covered  Decimal? @db.Decimal(10, 2)
  patient_responsibility Decimal? @db.Decimal(10, 2)
  status          ClaimStatus @default(DRAFT)
  submitted_date  DateTime?
  processed_date  DateTime?
  denial_reason   String?
  notes           String?
  
  // Relations
  patient         Patient @relation(fields: [patient_id], references: [id])
  insurance       PatientInsurance @relation(fields: [insurance_id], references: [id])
  bill            Payment @relation(fields: [bill_id], references: [id])
  provider        InsuranceProvider @relation(fields: [provider_id], references: [id])
  
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model CalendarIntegration {
  id                String @id @default(cuid())
  doctor_id         String
  provider          String // 'GOOGLE_CALENDAR', 'OUTLOOK', etc.
  access_token      String
  refresh_token     String?
  token_expires_at  DateTime?
  is_active         Boolean @default(true)
  last_sync_at      DateTime?
  
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  
  // Relations
  doctor            Doctor @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  calendar_events   CalendarEvent[]
  
  @@unique([doctor_id, provider], name: "doctor_provider_unique")
}

model CalendarEvent {
  id                String   @id @default(cuid())
  integration_id    String
  provider_event_id String   // External calendar event ID
  appointment_id    Int?     // Link to our appointment if exists
  title             String
  description       String?
  start_time        DateTime
  end_time          DateTime
  is_all_day        Boolean  @default(false)
  location          String?
  attendees         Json?    // Array of attendee emails
  status            String   @default("CONFIRMED") // "CONFIRMED", "TENTATIVE", "CANCELLED"
  event_type        String   @default("APPOINTMENT") // "APPOINTMENT", "BREAK", "BLOCKED", "PERSONAL"
  last_synced_at    DateTime @default(now())
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  integration       CalendarIntegration @relation(fields: [integration_id], references: [id], onDelete: Cascade)
  appointment       Appointment? @relation(fields: [appointment_id], references: [id], onDelete: SetNull)
}

model ScheduleNotification {
  id                String   @id @default(cuid())
  doctor_id         String
  appointment_id    Int?
  type              String   // "REMINDER", "CONFIRMATION", "CANCELLATION"
  recipient_type    String   // "PATIENT", "DOCTOR", "BOTH"
  send_time         DateTime
  is_sent           Boolean  @default(false)
  sent_at           DateTime?
  delivery_status   String   @default("PENDING") // "PENDING", "SENT", "FAILED", "CANCELLED"
  template_id       String?
  custom_message    String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  doctor            Doctor @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  appointment       Appointment? @relation(fields: [appointment_id], references: [id], onDelete: SetNull)
}



