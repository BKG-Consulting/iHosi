

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



enum Role {
  ADMIN
  NURSE
  DOCTOR
  LAB_TECHNICIAN
  PATIENT
  CASHIER
}

enum Status {
  ACTIVE
  INACTIVE
  DORMANT
}

enum JOBTYPE {
  FULL
  PART  
}

enum Gender {
  MALE
  FEMALE
}

enum AppointmentStatus {
  PENDING
  SCHEDULED
  CANCELLED
  COMPLETED
}

enum PaymentMethod {
  CASH
  CARD
}

enum PaymentStatus {
  PAID
  UNPAID
  PART
}

enum ConsentType {
  HIPAA_PRIVACY
  TREATMENT
  PAYMENT
  OPERATIONS
  MARKETING
  RESEARCH
  DIRECTORY_LISTING
  EMERGENCY_CONTACT
  TELEMEDICINE
  DATA_SHARING
}

enum ConsentStatus {
  GRANTED
  DENIED
  REVOKED
  EXPIRED
  PENDING
}

enum AvailabilityStatus {
  AVAILABLE
  UNAVAILABLE
  BUSY
  ON_BREAK
  ON_LEAVE
  EMERGENCY_ONLY
}

enum LeaveType {
  ANNUAL
  SICK
  MATERNITY
  PATERNITY
  UNPAID
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum AvailabilityUpdateType {
  SCHEDULE_CHANGE
  EMERGENCY_UNAVAILABLE
  TEMPORARY_UNAVAILABLE
  CAPACITY_UPDATE
  BREAK_TIME_UPDATE
}


model Patient {
  id                       String   @id //clerk userId
  first_name               String
  last_name                String
  date_of_birth            DateTime
  gender                   Gender @default(MALE)
  phone                    String
  email                    String   @unique
  marital_status           String
  address                  String
  emergency_contact_name   String
  emergency_contact_number String
  relation                 String
  blood_group              String?
  allergies                String?
  medical_conditions       String?
  medical_history          String?
  insurance_provider       String?
  insurance_number         String?
  privacy_consent          Boolean
  service_consent          Boolean
  medical_consent          Boolean
  img                      String?
  colorCode                String?

  appointments             Appointment[]
  medical                  MedicalRecords[]
  payments                 Payment[]
  ratings                  Rating[]
  consents                 PatientConsent[]
  beds                     Bed[]  // New: Bed assignments

  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt
}

model Doctor {
  id                    String   @id
  email                 String   @unique
  name                  String
  specialization        String
  license_number        String
  phone                 String
  address               String
  department            String?
  department_id         String?  // New: Reference to Department model
  emergency_contact     String
  emergency_phone       String
  qualifications        String
  experience_years      Int
  languages             String[] // Array of languages
  consultation_fee      Float
  max_patients_per_day  Int
  preferred_appointment_duration Int // in minutes
  img                   String?
  colorCode             String?
  availability_status   String?

  type                  JOBTYPE @default(FULL)
  working_days          WorkingDays[]
  appointments          Appointment[]
  ratings               Rating[]
  diagnosis             Diagnosis[] 
  leave_requests        LeaveRequest[]
  availability_updates  AvailabilityUpdate[]
  
  // New: Department relationship
  department_ref        Department? @relation("DepartmentDoctors", fields: [department_id], references: [id])

  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
}


model WorkingDays {
  id              Int   @id @default(autoincrement())
  doctor_id       String
  day             String
  start_time      String
  close_time      String
  is_working      Boolean @default(true)
  break_start     String?
  break_end       String?
  max_appointments Int?

  doctor          Doctor  @relation(fields: [doctor_id], references: [id], onDelete: Cascade)

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model LeaveRequest {
  id              String   @id @default(cuid())
  doctor_id       String
  leave_type      LeaveType
  start_date      DateTime
  end_date        DateTime
  reason          String
  status          LeaveStatus @default(PENDING)
  approved_by     String?
  approved_at     DateTime?
  notes           String?

  doctor          Doctor  @relation(fields: [doctor_id], references: [id], onDelete: Cascade)

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model AvailabilityUpdate {
  id              String   @id @default(cuid())
  doctor_id       String
  update_type     AvailabilityUpdateType
  effective_date  DateTime
  end_date        DateTime?
  reason          String?
  is_temporary    Boolean @default(false)

  doctor          Doctor  @relation(fields: [doctor_id], references: [id], onDelete: Cascade)

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}


model Staff {
  id            String   @id
  email         String   @unique
  name          String
  phone         String
  address       String
  department    String?
  department_id String?  // New: Reference to Department model
  img           String?
  license_number String?
  colorCode      String?

  role          Role
  status        Status @default(ACTIVE)
  
  // New: Department relationship
  department_ref        Department? @relation("DepartmentStaff", fields: [department_id], references: [id])

  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}


model Appointment {
  id                Int   @id @default(autoincrement())
  patient_id        String
  doctor_id         String
  appointment_date  DateTime
  time              String
  status            AppointmentStatus @default(PENDING)
  type              String
  note              String?
  patient           Patient  @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  doctor            Doctor   @relation(fields: [doctor_id], references: [id],  onDelete:  Cascade)

  bills             Payment[]
  medical           MedicalRecords[]

  reason            String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
}

model Payment {
  id              Int   @id @default(autoincrement())
  bill_id         Int?
  patient_id      String
  appointment_id  Int @unique
  bill_date       DateTime
  payment_date    DateTime
  discount        Float
  total_amount    Float
  amount_paid     Float

  payment_method  PaymentMethod @default(CASH)
  status          PaymentStatus @default(UNPAID)
  receipt_number  Int @default(autoincrement())

  appointment     Appointment @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  patient         Patient  @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  bills           PatientBills[]

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model PatientBills {
  id              Int   @id @default(autoincrement())
  bill_id         Int
  service_id      Int
  service_date    DateTime
  quantity        Int
  unit_cost       Float
  total_cost      Float
  service         Services @relation(fields: [service_id], references: [id])
  payment         Payment @relation(fields: [bill_id], references: [id], onDelete: Cascade)

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model LabTest {
  id            Int   @id @default(autoincrement())
  record_id     Int
  test_date     DateTime
  result        String
  status        String
  notes         String?
  service_id    Int @unique
  services      Services @relation(fields: [service_id], references: [id])

  medical_record MedicalRecords  @relation(fields: [record_id], references: [id], onDelete: Cascade)

  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model MedicalRecords {
  id              Int @id @default(autoincrement())
  patient_id      String
  appointment_id  Int
  doctor_id       String
  treatment_plan  String?
  prescriptions   String?
  lab_request     String?

  appointment     Appointment @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  patient         Patient  @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  lab_test        LabTest[]
  notes           String?
 
  vital_signs     VitalSigns[]
  diagnosis       Diagnosis[]

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model VitalSigns {
  id                Int      @id @default(autoincrement())
  patient_id        String
  medical_id        Int  
  medical           MedicalRecords @relation(fields: [medical_id], references: [id], onDelete: Cascade)
  body_temperature   Float    
  systolic          Int       
  diastolic         Int     
  heartRate         String      
  respiratory_rate   Int?       
  oxygen_saturation  Int?     
  weight            Float     
  height            Float     

  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
}

model Diagnosis {
  id              Int      @id @default(autoincrement())
  patient_id      String
  medical_id      Int
  doctor_id       String
  doctor          Doctor    @relation(fields: [doctor_id], references: [id])
  symptoms        String    
  diagnosis       String    
  notes           String?   
  prescribed_medications String?   
  follow_up_plan   String?

  medical          MedicalRecords @relation(fields: [medical_id ], references: [id], onDelete: Cascade)

  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
}

model AuditLog {
  id          Int   @id @default(autoincrement())
  user_id     String
  record_id   String
  action      String
  details     String?
  model       String

  // Remove problematic foreign key constraints
  // Audit logs should be independent and not enforce strict relationships

  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Rating {
  id         Int      @id @default(autoincrement())
  staff_id   String
  patient_id String
  rating     Int      
  comment    String?  

  doctor     Doctor   @relation(fields: [staff_id], references: [id], onDelete: Cascade)
  patient    Patient  @relation(fields: [patient_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Services {
  id             Int    @id @default(autoincrement())
  service_name    String
  description     String
  price           Float
  labtest         LabTest?
  bills           PatientBills[]

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model PatientConsent {
  id                Int           @id @default(autoincrement())
  patient_id        String
  consent_type      ConsentType
  status            ConsentStatus
  consent_text      String
  version           String
  granted_at        DateTime?
  revoked_at        DateTime?
  expires_at        DateTime?
  granted_by        String
  ip_address        String
  user_agent        String
  digital_signature String?
  witness_id        String?
  legal_basis       String
  purpose_of_use    String        @default("[]")
  data_categories   String        @default("[]")
  restrictions      String        @default("[]")
  metadata          String        @default("{}")

  patient           Patient       @relation(fields: [patient_id], references: [id], onDelete: Cascade)

  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt

  @@index([patient_id])
  @@index([consent_type])
  @@index([status])
  @@index([expires_at])
}

model UserSession {
  id             Int      @id @default(autoincrement())
  user_id        String
  session_token  String   @unique
  ip_address     String
  user_agent     String
  created_at     DateTime @default(now())
  last_activity  DateTime @default(now())
  expires_at     DateTime
  is_active      Boolean  @default(true)
  logout_reason  String?

  @@index([user_id])
  @@index([last_activity])
}

model LoginAttempt {
  id             Int      @id @default(autoincrement())
  email          String?
  user_id        String?
  ip_address     String
  user_agent     String
  success        Boolean
  failure_reason String?
  attempted_at   DateTime @default(now())

  @@index([email])
  @@index([ip_address])
  @@index([attempted_at])
}

model UserLockout {
  id              Int      @id @default(autoincrement())
  user_id         String?
  email           String?
  ip_address      String
  locked_at       DateTime @default(now())
  unlock_at       DateTime
  reason          String
  failed_attempts Int      @default(0)

  @@index([user_id])
  @@index([email])
  @@index([ip_address])
  @@index([unlock_at])
}

// New models for enterprise HIMS
model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique // Department code like "CARD", "NEURO"
  description String?
  location    String?  // Building, floor, wing
  contact_number String?
  email       String?
  head_doctor_id String? // Department head
  status      DepartmentStatus @default(ACTIVE)
  capacity    Int      @default(100) // Maximum capacity
  current_load Int     @default(0)   // Current patient load
  
  // Relations
  doctors    Doctor[] @relation("DepartmentDoctors")
  staff      Staff[]  @relation("DepartmentStaff")
  wards      Ward[]
  equipment  Equipment[]
  
  // Metadata
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String?  // User ID who created
  updated_by String?  // User ID who last updated
  
  @@map("departments")
}

enum DepartmentStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  CLOSED
}

model Ward {
  id          String   @id @default(cuid())
  name        String   // Ward name like "ICU", "General Ward A"
  department_id String
  floor       Int?
  wing        String?
  capacity    Int      @default(20)
  current_occupancy Int @default(0)
  ward_type   WardType
  status      WardStatus @default(ACTIVE)
  
  // Relations
  department Department @relation(fields: [department_id], references: [id], onDelete: Cascade)
  beds       Bed[]
  equipment  Equipment[]
  
  // Metadata
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  @@map("wards")
}

enum WardType {
  INTENSIVE_CARE
  GENERAL
  EMERGENCY
  OPERATING_ROOM
  RECOVERY
  PEDIATRIC
  MATERNITY
  PSYCHIATRIC
  ISOLATION
  STEP_DOWN
}

enum WardStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  QUARANTINE
  CLOSED
}

model Bed {
  id          String   @id @default(cuid())
  bed_number  String   // Bed identifier like "A1", "B3"
  ward_id     String
  bed_type    BedType
  status      BedStatus @default(AVAILABLE)
  current_patient_id String?
  last_cleaned DateTime?
  infection_status InfectionStatus @default(CLEAN)
  
  // Relations
  ward        Ward     @relation(fields: [ward_id], references: [id], onDelete: Cascade)
  patient     Patient? @relation(fields: [current_patient_id], references: [id])
  
  // Metadata
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  @@map("beds")
}

enum BedType {
  STANDARD
  ICU
  ISOLATION
  BARIATRIC
  PEDIATRIC
  MATERNITY
}

enum BedStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  CLEANING
  RESERVED
  OUT_OF_SERVICE
}

enum InfectionStatus {
  CLEAN
  CONTAMINATED
  ISOLATION_REQUIRED
  UNDER_CLEANING
}

model Equipment {
  id              String   @id @default(cuid())
  name            String
  model           String?
  serial_number   String   @unique
  department_id   String?
  ward_id         String?
  equipment_type  EquipmentType
  status          EquipmentStatus @default(OPERATIONAL)
  manufacturer    String?
  purchase_date   DateTime?
  warranty_expiry DateTime?
  last_maintenance DateTime?
  next_maintenance DateTime?
  maintenance_cycle Int? // Days between maintenance
  
  // Relations
  department      Department? @relation(fields: [department_id], references: [id])
  ward            Ward?       @relation(fields: [ward_id], references: [id])
  
  // Metadata
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  
  @@map("equipment")
}

enum EquipmentType {
  DIAGNOSTIC
  MONITORING
  SURGICAL
  IMAGING
  LABORATORY
  THERAPEUTIC
  SUPPORT
  TRANSPORT
}

enum EquipmentStatus {
  OPERATIONAL
  MAINTENANCE
  OUT_OF_SERVICE
  RETIRED
  QUARANTINED
}