// Enhanced Scheduling Models for Doctor Management System

// Google Calendar Integration
model DoctorCalendar {
  id                    String   @id @default(cuid())
  doctor_id             String
  google_calendar_id    String   @unique
  calendar_name         String
  is_primary            Boolean  @default(false)
  sync_enabled          Boolean  @default(true)
  last_sync_at          DateTime?
  sync_token            String?
  
  // Google Calendar settings
  timezone              String   @default("UTC")
  working_hours_start   String   @default("09:00")
  working_hours_end     String   @default("17:00")
  working_days          String[] // ["MONDAY", "TUESDAY", etc.]
  
  // Sync preferences
  sync_appointments     Boolean  @default(true)
  sync_availability     Boolean  @default(true)
  sync_leave_requests   Boolean  @default(true)
  
  doctor                Doctor   @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
}

// Advanced Time Slots Management
model TimeSlot {
  id                    String   @id @default(cuid())
  doctor_id             String
  date                  DateTime
  start_time            String
  end_time              String
  duration_minutes      Int
  slot_type             TimeSlotType
  is_available          Boolean  @default(true)
  is_booked             Boolean  @default(false)
  appointment_id        Int?
  
  // Recurring slot settings
  is_recurring          Boolean  @default(false)
  recurrence_pattern    String?  // "DAILY", "WEEKLY", "MONTHLY"
  recurrence_end_date   DateTime?
  
  // Buffer time settings
  buffer_before_minutes Int      @default(0)
  buffer_after_minutes  Int      @default(0)
  
  doctor                Doctor   @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  appointment           Appointment? @relation(fields: [appointment_id], references: [id])
  
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  
  @@unique([doctor_id, date, start_time])
}

// Doctor Schedule Templates
model ScheduleTemplate {
  id                    String   @id @default(cuid())
  doctor_id             String
  name                  String
  description           String?
  is_default            Boolean  @default(false)
  is_active             Boolean  @default(true)
  
  // Template settings
  working_days          String[] // ["MONDAY", "TUESDAY", etc.]
  working_hours_start   String
  working_hours_end     String
  appointment_duration  Int      @default(30) // minutes
  break_duration        Int      @default(15) // minutes
  max_appointments_per_day Int   @default(20)
  
  // Break times
  break_times           Json?    // Array of break time objects
  
  doctor                Doctor   @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  schedule_instances    ScheduleInstance[]
  
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
}

// Schedule Instances (actual schedules created from templates)
model ScheduleInstance {
  id                    String   @id @default(cuid())
  doctor_id             String
  template_id           String
  date                  DateTime
  is_active             Boolean  @default(true)
  
  // Override settings for this specific day
  working_hours_start   String?
  working_hours_end     String?
  appointment_duration  Int?
  max_appointments      Int?
  
  // Special notes for this day
  notes                 String?
  
  doctor                Doctor   @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  template              ScheduleTemplate @relation(fields: [template_id], references: [id], onDelete: Cascade)
  time_slots            TimeSlot[]
  
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  
  @@unique([doctor_id, date])
}

// Appointment Conflicts and Resolutions
model AppointmentConflict {
  id                    String   @id @default(cuid())
  appointment_id        Int
  conflict_type         ConflictType
  conflict_reason       String
  suggested_resolution  String?
  is_resolved           Boolean  @default(false)
  resolved_by           String?
  resolved_at           DateTime?
  resolution_notes      String?
  
  appointment           Appointment @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
}

// Doctor Availability Overrides
model AvailabilityOverride {
  id                    String   @id @default(cuid())
  doctor_id             String
  override_type         AvailabilityOverrideType
  start_date            DateTime
  end_date              DateTime
  reason                String
  is_approved           Boolean  @default(false)
  approved_by           String?
  approved_at           DateTime?
  
  // Override settings
  is_available          Boolean  @default(false)
  max_appointments      Int?
  working_hours_start   String?
  working_hours_end     String?
  
  doctor                Doctor   @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
}

// Enhanced Enums
enum TimeSlotType {
  CONSULTATION
  FOLLOW_UP
  EMERGENCY
  PROCEDURE
  BREAK
  LUNCH
  ADMINISTRATIVE
  TRAINING
  MEETING
}

enum ConflictType {
  DOUBLE_BOOKING
  OVERLAPPING_APPOINTMENTS
  OUTSIDE_WORKING_HOURS
  DOCTOR_UNAVAILABLE
  PATIENT_CONFLICT
  RESOURCE_CONFLICT
}

enum AvailabilityOverrideType {
  EMERGENCY_UNAVAILABLE
  EXTENDED_HOURS
  REDUCED_HOURS
  SPECIAL_EVENT
  PERSONAL_LEAVE
  MEDICAL_LEAVE
  TRAINING
  CONFERENCE
}

// Update existing Doctor model to include new relations
// Add these relations to the existing Doctor model:
// doctor_calendars       DoctorCalendar[]
// time_slots             TimeSlot[]
// schedule_templates     ScheduleTemplate[]
// schedule_instances     ScheduleInstance[]
// availability_overrides AvailabilityOverride[]

